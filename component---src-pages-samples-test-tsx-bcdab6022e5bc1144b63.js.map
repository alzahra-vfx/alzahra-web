{"version":3,"sources":["webpack://alzahravfx-website/./node_modules/react-intl/lib/src/components/useIntl.js","webpack://alzahravfx-website/./node_modules/react-intl/lib/src/components/message.js","webpack://alzahravfx-website/./src/pages/samples/test.tsx"],"names":["useIntl","intl","FormattedMessage","props","formatMessage","_a","textComponent","Text","id","description","defaultMessage","values","children","_b","tagName","Component","nodes","ignoreTag","Array","isArray","displayName","MemoizedFormattedMessage","prevProps","nextProps","otherProps","__rest","nextValues","nextOtherProps","num"],"mappings":"+LAGe,SAASA,IACtB,IAAIC,EAAO,aAAiB,MAE5B,OADA,QAAqBA,GACdA,I,2HCcT,SAASC,EAAiBC,GACxB,IAAIF,GAAO,EAAAD,EAAA,KACPI,EAAgBH,EAAKG,cACrBC,EAAKJ,EAAKK,cACVC,OAAc,IAAPF,EAAgB,WAAiBA,EACxCG,EAAKL,EAAMK,GACXC,EAAcN,EAAMM,YACpBC,EAAiBP,EAAMO,eACvBC,EAASR,EAAMQ,OACfC,EAAWT,EAAMS,SACjBC,EAAKV,EAAMW,QACXC,OAAmB,IAAPF,EAAgBN,EAAOM,EAOnCG,EAAQZ,EALK,CACfI,GAAIA,EACJC,YAAaA,EACbC,eAAgBA,GAEoBC,EAAQ,CAC5CM,UAPcd,EAAMc,YActB,OAJKC,MAAMC,QAAQH,KACjBA,EAAQ,CAACA,IAGa,mBAAbJ,EACFA,EAASI,GAGdD,EACK,gBAAoBA,EAAW,KAAM,mBAAuBC,IAG9D,gBAAoB,WAAgB,KAAMA,GAGnDd,EAAiBkB,YAAc,mBAC/B,IAAIC,EAA2B,OAAWnB,GAhD1C,SAAkBoB,EAAWC,GAC3B,IAAIZ,EAASW,EAAUX,OACnBa,GAAa,IAAAC,QAAOH,EAAW,CAAC,WAEhCI,EAAaH,EAAUZ,OACvBgB,GAAiB,IAAAF,QAAOF,EAAW,CAAC,WAExC,OAAO,QAAaG,EAAYf,KAAW,QAAaa,EAAYG,MA0CtEN,EAAyBD,YAAc,2BACvC,QC/CA,EAVa,WACZ,OACC,2BACC,gBAAC,EAAD,CAAkBZ,GAAG,aAAaG,OAAQ,CAAEiB,IAAK,KACjD,2BACA,gBAAC,EAAD,CAAkBpB,GAAG,aAAaG,OAAQ,CAAEiB,IAAK","file":"component---src-pages-samples-test-tsx-bcdab6022e5bc1144b63.js","sourcesContent":["import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n  var intl = React.useContext(Context);\n  invariantIntlContext(intl);\n  return intl;\n}","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\n\nfunction areEqual(prevProps, nextProps) {\n  var values = prevProps.values,\n      otherProps = __rest(prevProps, [\"values\"]);\n\n  var nextValues = nextProps.values,\n      nextOtherProps = __rest(nextProps, [\"values\"]);\n\n  return shallowEqual(nextValues, values) && shallowEqual(otherProps, nextOtherProps);\n}\n\nfunction FormattedMessage(props) {\n  var intl = useIntl();\n  var formatMessage = intl.formatMessage,\n      _a = intl.textComponent,\n      Text = _a === void 0 ? React.Fragment : _a;\n  var id = props.id,\n      description = props.description,\n      defaultMessage = props.defaultMessage,\n      values = props.values,\n      children = props.children,\n      _b = props.tagName,\n      Component = _b === void 0 ? Text : _b,\n      ignoreTag = props.ignoreTag;\n  var descriptor = {\n    id: id,\n    description: description,\n    defaultMessage: defaultMessage\n  };\n  var nodes = formatMessage(descriptor, values, {\n    ignoreTag: ignoreTag\n  });\n\n  if (!Array.isArray(nodes)) {\n    nodes = [nodes];\n  }\n\n  if (typeof children === 'function') {\n    return children(nodes);\n  }\n\n  if (Component) {\n    return React.createElement(Component, null, React.Children.toArray(nodes));\n  }\n\n  return React.createElement(React.Fragment, null, nodes);\n}\n\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nconst Test = () => {\n\treturn (\n\t\t<div>\n\t\t\t<FormattedMessage id=\"testPlural\" values={{ num: 1 }} />\n\t\t\t<br />\n\t\t\t<FormattedMessage id=\"testPlural\" values={{ num: 99 }} />\n\t\t</div>\n\t);\n};\n\nexport default Test;\n"],"sourceRoot":""}